package com.lbi.mvc.view {	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.getTimer;	import com.lbi.animation.animator.Animator;	import com.lbi.mvc.helper.TypographyBase;	/**	 * @author michaelforrest	 */	public class ViewBase extends Sprite {		private var nextY : Number = 0;		public var spacing : Number = 0;		public var leftMargin : Number = 0;		public var columnWidth : Number = 800;		private var elements : Array;		private var topMargin : Number = 0;		public var animator : Animator;		private var unique_id : String;		protected var image : ViewBase;		private var image_url : String;		private var loader : Loader;		private var __visibility:Number;		public function get visibility():Number{			return __visibility;		}		public function set visibility(v:Number):void{			__visibility = v;		}		public function ViewBase(options : Object = null) {			unique_id = "viewbase-" + getTimer() + "-" + Math.random();			animator = new Animator(this);			visibility = 1;			elements = [];			if(options) {				for (var key : String in options) {					this[key] = options[key];				}			}			nextY = topMargin;		}		public function addTextField(style : TypographyBase, rectangle : Rectangle,  copy: String ="") : TextField {			var txt : TextField = TypographyBase.createTextField(style, rectangle);			txt.text = copy;			addChild(txt);			return txt;		}		public function getUniqueID() : String {			return unique_id;		}		public function setPosition(position : Point) : void {			x = position.x;			y = position.y;		}		public function loadImage(url : String) : void {			if(image){				destroyImage();			}else{				createImage();			}			image_url = url;			loader.load(new URLRequest(url));		}		private function createImage() : void {			image = new ViewBase();			addChild(image);			loader  = new Loader();			image.addChild(loader);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);		}		protected function onIOError(event : IOErrorEvent) : void {			trace("Error loading "+ image_url);		}		protected function add(viewClass : Class, model:Object=null) : ViewBase {			var result : ViewBase = model? new viewClass(model) : new viewClass();			addChild(result);			return result;		}		private function destroyImage() : void {
			try{				var li:LoaderInfo = loader.contentLoaderInfo;				if(li.childAllowsParent && li.content is Bitmap){					(li.content as Bitmap).bitmapData.dispose(); // remove bitmap from memory				}			}catch(e:Error){				trace('error disposing of image ' + image);			}		}
		public function addChildFromLibrary(assetClass : Class) : ViewBase {			var result : ViewBase = new ViewBase();			addChild(result);			result.addChild(new assetClass() as DisplayObject);			return result;		}

		protected function onImageLoaded(e:Event) : void {			Bitmap(loader.content).smoothing = true;		}		protected function enableAsButton() : void {			mouseChildren = false;			buttonMode = true;			useHandCursor = true;		}		public function append(element : DisplayObject) : DisplayObject {			if(!element.parent) addChild(element);			placeElement(element);			elements.push(element);			return element;		}		private function placeElement(element : DisplayObject) : void {			element.y = nextY;			nextY += element.height + spacing;		}		public function text(text : String, style : TypographyBase) : DisplayObject {			var txt : TextField = addTextField(style, new Rectangle(leftMargin, 0, columnWidth, 1000));			txt.text = text;			txt.height = txt.textHeight + 4; // if 2px padding is still the strange magic number			return txt;		}		public function row(views : Array) : void {			var nextX : Number = leftMargin;			var maxHeight : Number = 0;			for (var i : Number = 0; i < views.length; i++) {				var view:DisplayObject = views[i];				if(!view.parent) addChild(view);				view.y = nextY;				view.x = nextX;				nextX += view.width + spacing;				if(view.height > maxHeight) maxHeight = view.height;			}			nextY += maxHeight + spacing;		}		public function layoutElements() : void {			nextY = topMargin;			for (var i : Number = 0; i < elements.length; i++) {				var element:DisplayObject = elements[i];				placeElement(element);			}		}
	}}