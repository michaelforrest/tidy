package com.lbi.mvc.view {	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.getTimer;	import com.lbi.animation.animator.Animator;	import com.lbi.mvc.helper.TypographyBase;	/**	 * @author michaelforrest	 */	public class ViewBase extends Sprite {		public var animator : Animator;		private var unique_id : String;		protected var image : ViewBase;		private var image_url : String;		private var loader : Loader;		public function ViewBase() {			unique_id = "viewbase-" + getTimer() + "-" + Math.random();			animator = new Animator(this);		}		protected function addTextField(style : TypographyBase, rectangle : Rectangle,  copy: String ="") : TextField {			var txt : TextField = TypographyBase.addTextField(this, style, rectangle);			txt.text = copy;			return txt;		}		public function getUniqueID() : String {			return unique_id;		}		public function setPosition(position : Point) : void {			x = position.x;			y = position.y;		}		public function loadImage(url : String) : void {			if(image){				destroyImage();			}else{				createImage();			}			image_url = url;			loader.load(new URLRequest(url));		}		private function createImage() : void {			image = new ViewBase();			addChild(image);			loader  = new Loader();			image.addChild(loader);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);		}		protected function onIOError(event : IOErrorEvent) : void {			throw new Error("Error loading "+ image_url);		}		protected function add(viewClass : Class, model:Object=null) : ViewBase {			var result : ViewBase = model? new viewClass(model) : new viewClass();			addChild(result);			return result;		}		private function destroyImage() : void {
			try{				var li:LoaderInfo = loader.contentLoaderInfo;				if(li.childAllowsParent && li.content is Bitmap){					(li.content as Bitmap).bitmapData.dispose(); // remove bitmap from memory				}			}catch(e:Error){				trace('error disposing of image ' + image);			}		}
		public function addChildFromLibrary(assetClass : Class) : ViewBase {			var result : ViewBase = new ViewBase();			addChild(result);			result.addChild(new assetClass() as DisplayObject);			return result;		}

		protected function onImageLoaded(e:Event) : void {		}		protected function enableAsButton() : void {			mouseChildren = false;			buttonMode = true;		}
	}}